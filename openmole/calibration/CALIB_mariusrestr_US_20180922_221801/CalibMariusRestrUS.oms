val countrycode = "US"

import java.util.Date
import java.text.SimpleDateFormat

logger.level("FINE")

val economicMultiplier = Val[Double]
val sizeEffectOnSupply = Val[Double]
val sizeEffectOnDemand = Val[Double]
val distanceDecay = Val[Double]

val id = Val[Int]

// Reporters
val logmse=Val[Double]
val mselog=Val[Double]

// config files
val popFile=Val[File]
val distFile=Val[File]
val dateFile=Val[File]

// Model
val model =
  ScalaTask(
    """
      |import urbangrowth.models.marius._
      |import urbangrowth.indicators._
      | val res = SimpleModel(input.distFile,input.popFile,input.dateFile,
      |      input.economicMultiplier,input.sizeEffectOnSupply, input.sizeEffectOnDemand,
      |      input.distanceDecay, 1.0,1.0).run()
      | val logmse = res.logmse
      | val mselog = res.mselog
    """.stripMargin
  ) set (
    plugins += pluginsOf(urbangrowth.models.marius.SimpleModel),
    inputs += (popFile,distFile,dateFile,economicMultiplier,sizeEffectOnSupply,sizeEffectOnDemand,distanceDecay,id),
    outputs += (economicMultiplier,sizeEffectOnSupply,sizeEffectOnDemand,distanceDecay,id),
    outputs += (logmse,mselog)
  )
val modelCapsule = Capsule(model)

val fileSetting = ExplorationTask(
    (popFile in Seq( workDirectory / "data"/ "processed" / (countrycode+"_pops.csv"))) x
    (distFile in Seq(workDirectory / "data"/ "processed" / (countrycode+"_dist.csv"))) x
    (dateFile in Seq(workDirectory / "data" /  "processed" / (countrycode+"_dates.csv"))) x
    (id in Seq(1))
) set(
    inputs += (economicMultiplier,sizeEffectOnSupply,sizeEffectOnDemand,distanceDecay),
    outputs += (economicMultiplier,sizeEffectOnSupply,sizeEffectOnDemand,distanceDecay)
)

val eval = fileSetting -< model


val modelname = "mariusrestr"
val datestr = (new SimpleDateFormat("yyyyMMdd_HHmmss")).format(new Date()).toString
val purpose = "CALIB"
val resdir = purpose+"_"+modelname+"_"+countrycode+"_"+datestr

val evolution =
  NSGA2Evolution(
    genome =
      Seq(
        economicMultiplier in Range(0.0, 100.0),
        sizeEffectOnSupply in Range(1.0, 20.0),
        sizeEffectOnDemand in Range(1.0, 20.0),
        distanceDecay in Range(0.0, 10.0)
      ),
      mu = 100,
      objectives = Seq(mselog,logmse),
      evaluation = eval,
      termination = 30 minutes,
      parallelism = 20
      //distribution = Island(10)
  )


// Define the hook to save the results
val savePopulation = SavePopulationHook(evolution, workDirectory / "calib" / resdir)

//val grid = EGIEnvironment("vo.complex-systems.eu",openMOLEMemory = 256 megabytes)
val local = LocalEnvironment(20)

//island on grid hook savePopulation
evolution on local hook savePopulation


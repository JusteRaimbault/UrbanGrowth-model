val countrycode = "world"

import java.util.Date
import java.text.SimpleDateFormat

logger.level("FINE")

val growthRate = Val[Double]
val gravityWeight = Val[Double]
val gravityGamma = Val[Double]
val gravityDecay = Val[Double]
val gravityAlpha = Val[Double]

val id = Val[Int]

// Reporters
val logmse=Val[Double]
val mselog=Val[Double]

// config files
val popFile=Val[File]
val distFile=Val[File]
val dateFile=Val[File]

// Model
val model = ScalaTask(
    """
      |import urbangrowth.models.coevolution._
      |import urbangrowth.indicators._
      | val res = Coevolution(input.popFile, input.distFile,null, input.dateFile,input.growthRate,input.gravityWeight, input.gravityGamma, input.gravityDecay, 0.0, 1.0, 1.0).run()
      | val logmse = res.logmse
      | val mselog = res.mselog
    """.stripMargin
  ) set (
    plugins += pluginsOf(urbangrowth.models.coevolution.Coevolution),
    inputs += (popFile,distFile,dateFile,growthRate,gravityWeight,gravityGamma,gravityDecay,id),
    outputs += (growthRate,gravityWeight,gravityGamma,gravityDecay,id),
    outputs += (logmse,mselog),
    popFile := workDirectory / "data"/ "processed" / (countrycode+"_pops.csv"),
    distFile := workDirectory / "data"/  "processed" / (countrycode+"_dist.csv"),
    dateFile := workDirectory / "data" /  "processed" / (countrycode+"_dates.csv"),
    id := 1
  )



val modelname = "intgib"
val datestr = (new SimpleDateFormat("yyyyMMdd_HHmmss")).format(new Date()).toString
val purpose = "CALIB_GRID"
val resdir = purpose+"_"+modelname+"_"+countrycode+"_"+datestr

val grid = EGIEnvironment("vo.complex-systems.eu")
//val local = LocalEnvironment(20)


val evolution =
  NSGA2Evolution(
    genome =
      Seq(
        growthRate in Range(0.0, 0.05),
        gravityWeight in Range(0.0,0.05),
        gravityGamma in Range(0.0,10.0),
        gravityDecay in Range(0.1,100000.0)
      ),
    mu=400,
    objectives = Seq(mselog,logmse),
    evaluation = model,
    termination = 100000,
    parallelism = 1000,
    distribution = Island(10 minutes)
)


val savePopulation = SavePopulationHook(evolution, workDirectory / "calib" / resdir)



//island on grid hook savePopulation
(evolution on grid hook savePopulation)

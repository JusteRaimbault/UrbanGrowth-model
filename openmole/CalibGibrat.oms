//val countrycode = "ZA"



def calib(countrycode: String) = {
    
    import java.util.Date
    import java.text.SimpleDateFormat

val growthRate = Val[Double]

val id = Val[Int]

// Reporters
val logmse=Val[Double]
val mselog=Val[Double]

// config files
val popFile=Val[File]
val dateFile=Val[File]

// Model
val model =
  ScalaTask(
    """
      |import urbangrowth.models.coevolution._
      |import urbangrowth.indicators._
      | val res = Coevolution(input.popFile,null,null, input.dateFile,input.growthRate,0.0, 1.0, 1.0, 0.0, 1.0, 1.0).run()
      | val logmse = res.logmse
      | val mselog = res.mselog
    """.stripMargin
  ) set (
    plugins += pluginsOf(urbangrowth.models.coevolution.Coevolution),
    inputs += (popFile,dateFile,growthRate,id),
    outputs += (growthRate,id),
    outputs += (logmse,mselog)
  )
val modelCapsule = Capsule(model)


val fileSetting = ExplorationTask(
    (popFile in Seq( workDirectory / "data"/ "processed" / (countrycode+"_pops.csv"))) x
    (dateFile in Seq(workDirectory / "data"/ "processed" / (countrycode+"_dates.csv"))) x
    (id in Seq(1))
  ) set(
    inputs += (growthRate),
    outputs += (growthRate)
  )

val eval = fileSetting -< model


val modelname = "gibrat"
val datestr = (new SimpleDateFormat("yyyyMMdd_HHmmss")).format(new Date()).toString
val purpose = "CALIBGRID"
val resdir = purpose+"_"+modelname+"_"+countrycode+"_"+datestr

val island =
  NSGA2Evolution(
    genome =
      Seq(
        growthRate in Range(0.0, 0.1)
      ),
      mu = 200,
      objectives = Seq(mselog,logmse),
      evaluation = eval,
      termination = 100000,
      parallelism = 200,
      distribution = Island(15 minutes)
)


  // Define the hook to save the results
  val savePopulation = SavePopulationHook(island, workDirectory / "calib" / resdir,1000)

  val env = EGIEnvironment("vo.complex-systems.eu")
  //val env = LocalEnvironment(20)

//island on grid hook savePopulation
  (island on env hook savePopulation)
}

//val systems = Seq("ZA","CN","US","BR","EU","IN","RU")
val systems = Seq("ZA","CN","US")

EmptyTask() -- systems.map(calib)


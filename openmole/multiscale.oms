import java.text.SimpleDateFormat
import java.util.Date

logger.level("FINE")

// world parameters
val timeSteps = Val[Int]
val macroNcities = Val[Int]
val macroInitialHierarchy = Val[Double]
val macroInitialMaxPop = Val[Double]
val macroRange = Val[Double]
val mesoGridSize = Val[Int]
val mesoCenterDensity = Val[Int]

// model parameters
val macroGrowthRate = Val[Double]
val macroInteractionDecay = Val[Double]
val macroInteractionWeight = Val[Double]
val macroInteractionGamma = Val[Double]

val mesoAlpha = Val[Double]
val mesoBeta = Val[Double]
val mesoNdiff = Val[Double]
val mesoTimeSteps = Val[Double]

val macroMesoBetaUpdateMax = Val[Double]
val macroMesoAlphaUpdateMax = Val[Double]
val mesoMacroCongestionCost = Val[Double]
val mesoMacroDecayUpdateMax = Val[Double]

val replication = Val[Int]
val id = Val[Int]

// indicators
val macroPopulations = Val[Array[Double]]
val macroClosenesses = Val[Array[Double]]
val macroAccessibilities = Val[Array[Double]]
val mesoMorans = Val[Array[Double]]
val mesoDistances = Val[Array[Double]]
val mesoEntropy = Val[Array[Double]]
val mesoSlopes = Val[Array[Double]]
val mesoSlopeRsquared = Val[Array[Double]]
val mesoCongestedFlows = Val[Array[Double]]
val mesoMissingPopulations = Val[Array[Double]]


val model = ScalaTask(
  """
  |import urbangrowth._
  |import urbangrowth.models.multiscale._
  |
  |val rng = new scala.util.Random(input.replication)
  |
  |val model = MultiscaleModel(timeSteps = input.timeSteps,macroNcities = input.macroNcities,macroInitialHierarchy = input.macroInitialHierarchy,macroInitialMaxPop = input.macroInitialMaxPop,macroRange=input.macroRange,
  |    macroGrowthRate = input.macroGrowthRate,macroInteractionDecay = input.macroInteractionDecay,macroInteractionWeight=input.macroInteractionWeight,macroInteractionGamma=input.macroInteractionGamma,
  |    mesoGridSize=input.mesoGridSize,mesoCenterDensity=input.mesoCenterDensity,mesoAlpha = input.mesoAlpha,mesoBeta=input.mesoBeta,mesoNdiff = input.mesoNdiff.toInt,mesoTimeSteps = input.mesoTimeSteps.toInt,
  |    macroMesoAlphaUpdateMax = input.macroMesoAlphaUpdateMax,macroMesoBetaUpdateMax = input.macroMesoBetaUpdateMax,mesoMacroCongestionCost = input.mesoMacroCongestionCost,mesoMacroDecayUpdateMax = input.mesoMacroDecayUpdateMax
  |  )
  |val result = model.modelRun(rng)
  |
  |val (macroPopulations,macroClosenesses,macroAccessibilities,mesoMorans,mesoDistances,mesoEntropy,mesoSlopes,mesoSlopeRsquared,mesoCongestedFlows,mesoMissingPopulations) = result.asArrayTuple
  """.stripMargin
) set (
  (inputs,outputs) += (timeSteps,macroNcities,macroInitialHierarchy,macroInitialMaxPop,macroRange,macroGrowthRate,macroInteractionDecay,macroInteractionWeight,macroInteractionGamma,
    mesoGridSize,mesoCenterDensity,mesoAlpha,mesoBeta,mesoNdiff,mesoTimeSteps,macroMesoAlphaUpdateMax,macroMesoBetaUpdateMax,mesoMacroCongestionCost,mesoMacroDecayUpdateMax,replication,id),
  outputs += (macroPopulations,macroClosenesses,macroAccessibilities,mesoMorans,mesoDistances,mesoEntropy,mesoSlopes,mesoSlopeRsquared,mesoCongestedFlows,mesoMissingPopulations),
  plugins += pluginsOf[_root_.urbangrowth.models.multiscale.MultiscaleModel],
  timeSteps := 20,macroNcities := 20,macroInitialHierarchy:=1.0,macroInitialMaxPop:=100000,macroRange:=500,mesoGridSize:=50,mesoCenterDensity:=1000
)

//val purpose = "MULTISCALE_TEST"
//val purpose = "MULTISCALE_LHS_GRID"
val purpose = "MULTISCALE_TARGETEDGRID_GRID"


val env = EGIEnvironment("vo.complex-systems.eu")
//val env = LocalEnvironment(10)

val indics_hook = AppendToCSVFileHook(workDirectory / "exploration" / ((new java.text.SimpleDateFormat("yyyyMMdd_HHmmss")).format(new java.util.Date()))+"_"+purpose+".csv") set (arraysOnSingleRow := true)



val exploration = DirectSampling(
  evaluation = (model on env by 200 hook indics_hook),
  //evaluation = (model on env hook indics_hook),
  /*sampling = (LHS(1,
        macroGrowthRate in Range(0.0,0.05),
        macroInteractionDecay in Range(20.0,500.0),
        macroInteractionWeight in Range(0.0,0.01),
        macroInteractionGamma in Range(0.5,5.0),
        mesoAlpha in Range(0.5,5.0),
        mesoBeta in Range(0.0,0.1),
        mesoNdiff in Range(1.0,5.0),
        mesoTimeSteps in Range(1.0,20.0),
        macroMesoAlphaUpdateMax in Range(-0.1,0.1),
        macroMesoBetaUpdateMax in Range(-0.1,0.1),
        mesoMacroCongestionCost in Range(0.5,2.0),
        mesoMacroDecayUpdateMax in Range(-0.1,0.1)
      )
      withIndex id)
      x (replication in (UniformDistribution[Int](10000) take 10))*/
    sampling = ((
    //(macroGrowthRate in (0.0 to 0.05 by 0.05))
    (macroGrowthRate is 0.0)
    x (macroInteractionDecay in (10.0 to 1000.0 by 10.0))
    //x (macroInteractionWeight in (0.001 to 0.011 by 0.01))
    x (macroInteractionWeight is 0.01)
    //x (macroInteractionGamma in (0.5 to 5.0 by 4.5))
    x (macroInteractionGamma is 2.0)
    //x (mesoAlpha in (0.5 to 5.0 by 4.5))
    x (mesoAlpha is 1.0)
    //x (mesoBeta in (0.0 to 0.1 by 0.1))
    x (mesoBeta is 0.1)
    x (mesoNdiff is 1.0)
    x (mesoTimeSteps in (1.0 to 21.0 by 1.0))
    //x (mesoTimeSteps is 10.0)
    //x (macroMesoAlphaUpdateMax in (-0.1 to 0.1 by 0.1))
    x (macroMesoAlphaUpdateMax is 0.0)
    x (macroMesoBetaUpdateMax in (-0.1 to 0.1 by 0.05))
    //x (mesoMacroCongestionCost in (0.5 to 2.0 by 1.5))
    x (mesoMacroCongestionCost is 2.0)
    x (mesoMacroDecayUpdateMax in (-0.1 to 0.1 by 0.05))
  )
  withIndex id)
  x (replication in (UniformDistribution[Int](10000) take 50))
)


exploration

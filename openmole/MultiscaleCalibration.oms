import java.text.SimpleDateFormat
import java.util.Date

// world parameters
val timeSteps = Val[Int]
val macroNcities = Val[Int]
val macroInitialHierarchy = Val[Double]
val macroInitialMaxPop = Val[Double]
val macroRange = Val[Double]
val mesoGridSize = Val[Int]
val mesoCenterDensity = Val[Int]

// model parameters
val macroGrowthRate = Val[Double]
val macroInteractionDecay = Val[Double]
val macroInteractionWeight = Val[Double]
val macroInteractionGamma = Val[Double]
val mesoAlpha = Val[Double]
val mesoBeta = Val[Double]
val mesoNdiff = Val[Double]
val mesoTimeSteps = Val[Double]
val macroMesoBetaUpdateMax = Val[Double]
val macroMesoAlphaUpdateMax = Val[Double]
val mesoMacroCongestionCost = Val[Double]
val mesoMacroDecayUpdateMax = Val[Double]

val replication = Val[Int]

// indicators
val macroHierarchy = Val[Double]
val mesoAggregation = Val[Double]
val mesoDistance = Val[Double]


val model = ScalaTask(
  """
  |import urbangrowth._
  |import urbangrowth.models.multiscale._
  |
  |val rng = new scala.util.Random(input.replication)
  |
  |val model = MultiscaleModel(timeSteps = input.timeSteps,macroNcities = input.macroNcities,macroInitialHierarchy = input.macroInitialHierarchy,macroInitialMaxPop = input.macroInitialMaxPop,macroRange=input.macroRange,
  |    macroGrowthRate = input.macroGrowthRate,macroInteractionDecay = input.macroInteractionDecay,macroInteractionWeight=input.macroInteractionWeight,macroInteractionGamma=input.macroInteractionGamma,
  |    mesoGridSize=input.mesoGridSize,mesoCenterDensity=input.mesoCenterDensity,mesoAlpha = input.mesoAlpha,mesoBeta=input.mesoBeta,mesoNdiff = input.mesoNdiff.toInt,mesoTimeSteps = input.mesoTimeSteps.toInt,
  |    macroMesoAlphaUpdateMax = input.macroMesoAlphaUpdateMax,macroMesoBetaUpdateMax = input.macroMesoBetaUpdateMax,mesoMacroCongestionCost = input.mesoMacroCongestionCost,mesoMacroDecayUpdateMax = input.mesoMacroDecayUpdateMax
  |  )
  |val result = model.modelRun(rng)
  |
  |val (macroHierarchy,mesoAggregation,mesoDistance) = result.summaryIndicators
  """.stripMargin
) set (
  (inputs,outputs) += (timeSteps,macroNcities,macroInitialHierarchy,macroInitialMaxPop,macroRange,macroGrowthRate,macroInteractionDecay,macroInteractionWeight,macroInteractionGamma,
    mesoGridSize,mesoCenterDensity,mesoAlpha,mesoBeta,mesoNdiff,mesoTimeSteps,macroMesoAlphaUpdateMax,macroMesoBetaUpdateMax,mesoMacroCongestionCost,mesoMacroDecayUpdateMax,replication),
  outputs += (macroHierarchy,mesoAggregation,mesoDistance),
  plugins += pluginsOf[_root_.urbangrowth.models.multiscale.MultiscaleModel],
  timeSteps := 20,macroNcities := 20,macroInitialHierarchy:=1.0,macroInitialMaxPop:=100000,macroRange:=500,mesoGridSize:=50,mesoCenterDensity:=1000
)

val purpose = "CALIBRATION_GRID"

val env = EGIEnvironment("vo.complex-systems.eu")


NSGA2Evolution(
    evaluation = model,
    mu = 200,
    genome = Seq(
      macroGrowthRate in Range(0.0,0.05),
      macroInteractionDecay in Range(20.0,500.0),
      macroInteractionWeight in Range(0.0,0.01),
      macroInteractionGamma in Range(0.5,5.0),
      mesoAlpha in Range(0.5,5.0),
      mesoBeta in Range(0.0,0.1),
      mesoNdiff in Range(1.0,5.0),
      mesoTimeSteps in Range(1.0,20.0),
      macroMesoAlphaUpdateMax in Range(-0.1,0.1),
      macroMesoBetaUpdateMax in Range(-0.1,0.1),
      mesoMacroCongestionCost in Range(0.5,2.0),
      mesoMacroDecayUpdateMax in Range(-0.1,0.1)
    ),
      objectives = Seq(macroHierarchy,mesoAggregation,mesoDistance),
      stochastic = Stochastic(seed = replication),
      termination = 100000,
      parallelism = 1000,
      distribution = Island(20 minutes),
) hook ((workDirectory /  "calibration" / (((new SimpleDateFormat("yyyyMMdd_HHmm")).format(new Date()))+"_"+purpose)), frequency = 100) on env
